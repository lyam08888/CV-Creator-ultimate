// Test script pour v√©rifier que le drag and drop fonctionne
// √Ä ex√©cuter dans la console du navigateur

console.log("üîß Test de r√©paration du drag and drop");

// Test 1: V√©rifier que SortableJS est charg√©
console.log("\nüì¶ V√©rification du chargement de SortableJS:");
if (typeof Sortable !== 'undefined') {
    console.log("‚úÖ SortableJS charg√© correctement");
} else {
    console.log("‚ùå SortableJS n'est pas charg√© !");
}

// Test 2: V√©rifier les √©l√©ments de colonne
console.log("\nüìä V√©rification des colonnes CV:");
const columns = document.querySelectorAll('[id^="cv-col-"]');
console.log(`Colonnes trouv√©es: ${columns.length}`);

columns.forEach((col, index) => {
    console.log(`${col.id}: ${col ? '‚úÖ Existe' : '‚ùå Manquant'}`);
    if (col.sortable) {
        console.log(`  ‚îî‚îÄ Sortable instance: ‚úÖ Attach√©e`);
    } else {
        console.log(`  ‚îî‚îÄ Sortable instance: ‚ùå Non attach√©e`);
    }
});

// Test 3: V√©rifier les handles de drag
console.log("\nüîó V√©rification des handles de drag:");
const dragHandles = document.querySelectorAll('.drag-handle');
console.log(`Handles trouv√©es: ${dragHandles.length}`);

dragHandles.forEach((handle, index) => {
    const module = handle.closest('.cv-module');
    if (module) {
        console.log(`‚úÖ Handle ${index + 1}: Module "${module.id || 'sans-id'}" - Visible: ${getComputedStyle(handle).opacity !== '0'}`);
    } else {
        console.log(`‚ùå Handle ${index + 1}: Pas de module parent`);
    }
});

// Test 4: V√©rifier les modules CV
console.log("\nüìã V√©rification des modules CV:");
const cvModules = document.querySelectorAll('.cv-module');
console.log(`Modules trouv√©s: ${cvModules.length}`);

cvModules.forEach((module, index) => {
    const handle = module.querySelector('.drag-handle');
    const id = module.id || `module-${index + 1}`;
    console.log(`${handle ? '‚úÖ' : '‚ùå'} Module "${id}": ${handle ? 'Handle pr√©sent' : 'HANDLE MANQUANT'}`);
});

// Test 5: Tester l'initialisation du drag and drop
console.log("\nüîÑ Test de r√©initialisation du drag and drop:");
try {
    if (typeof initializeAllSortable === 'function') {
        initializeAllSortable();
        console.log("‚úÖ initializeAllSortable() ex√©cut√©e sans erreur");
        
        // Rev√©rifier les instances Sortable apr√®s r√©initialisation
        const columnsAfter = document.querySelectorAll('[id^="cv-col-"]');
        let sortableCount = 0;
        columnsAfter.forEach(col => {
            if (col.sortable) sortableCount++;
        });
        console.log(`‚úÖ Instances Sortable actives: ${sortableCount}/${columnsAfter.length}`);
    } else {
        console.log("‚ùå Fonction initializeAllSortable non d√©finie");
    }
} catch (error) {
    console.log("‚ùå ERREUR lors de l'initialisation:", error.message);
}

// Test 6: Tester la fonctionnalit√© drag (simulation)
console.log("\nüéØ Test de simulation de drag:");
const firstModule = document.querySelector('.cv-module');
if (firstModule) {
    const handle = firstModule.querySelector('.drag-handle');
    if (handle) {
        console.log("‚úÖ Module de test trouv√© avec handle");
        
        // Simuler un hover pour voir si le handle devient visible
        firstModule.dispatchEvent(new Event('mouseenter'));
        const handleOpacity = getComputedStyle(handle).opacity;
        console.log(`Handle visibility au hover: ${handleOpacity !== '0' ? '‚úÖ Visible' : '‚ùå Invisible'}`);
        
        // V√©rifier les styles CSS
        const handleStyles = getComputedStyle(handle);
        console.log(`Handle cursor: ${handleStyles.cursor}`);
        console.log(`Handle position: ${handleStyles.position}`);
    } else {
        console.log("‚ùå Aucun handle trouv√© dans le premier module");
    }
} else {
    console.log("‚ùå Aucun module CV trouv√©");
}

// Test 7: V√©rifier les √©v√©nements
console.log("\nüé≠ V√©rification des √©v√©nements:");
const testColumn = document.querySelector('[id^="cv-col-"]');
if (testColumn && testColumn.sortable) {
    const sortableInstance = testColumn.sortable;
    console.log("‚úÖ Instance Sortable d√©tect√©e");
    console.log(`  ‚îî‚îÄ Options groupe: ${sortableInstance.option('group')}`);
    console.log(`  ‚îî‚îÄ Handle selector: ${sortableInstance.option('handle')}`);
    console.log(`  ‚îî‚îÄ Animation: ${sortableInstance.option('animation')}ms`);
} else {
    console.log("‚ùå Aucune instance Sortable trouv√©e");
}

// Test 8: Diagnostic CSS
console.log("\nüé® Diagnostic CSS des handles:");
const testHandle = document.querySelector('.drag-handle');
if (testHandle) {
    const styles = getComputedStyle(testHandle);
    console.log(`Position: ${styles.position}`);
    console.log(`Top: ${styles.top}`);
    console.log(`Left: ${styles.left}`);
    console.log(`Cursor: ${styles.cursor}`);
    console.log(`Z-index: ${styles.zIndex}`);
    console.log(`Pointer events: ${styles.pointerEvents}`);
} else {
    console.log("‚ùå Aucun handle trouv√© pour le diagnostic CSS");
}

// R√©sum√©
console.log("\nüìà R√âSUM√â DU DIAGNOSTIC:");
const hasLibrary = typeof Sortable !== 'undefined';
const hasColumns = document.querySelectorAll('[id^="cv-col-"]').length > 0;
const hasModules = document.querySelectorAll('.cv-module').length > 0;
const hasHandles = document.querySelectorAll('.drag-handle').length > 0;
const hasFunction = typeof initializeAllSortable === 'function';

const score = [hasLibrary, hasColumns, hasModules, hasHandles, hasFunction].filter(Boolean).length;

console.log(`SortableJS charg√©: ${hasLibrary ? '‚úÖ' : '‚ùå'}`);
console.log(`Colonnes CV pr√©sentes: ${hasColumns ? '‚úÖ' : '‚ùå'}`);
console.log(`Modules CV pr√©sents: ${hasModules ? '‚úÖ' : '‚ùå'}`);
console.log(`Handles de drag pr√©sents: ${hasHandles ? '‚úÖ' : '‚ùå'}`);
console.log(`Fonction d'initialisation: ${hasFunction ? '‚úÖ' : '‚ùå'}`);

console.log(`\nüéØ SCORE: ${score}/5`);

if (score === 5) {
    console.log("üéâ PARFAIT! Le drag and drop devrait fonctionner maintenant!");
} else if (score >= 3) {
    console.log("‚ö†Ô∏è BIEN! Il peut y avoir des probl√®mes mineurs.");
} else {
    console.log("‚ùå PROBL√àMES MAJEURS d√©tect√©s dans le drag and drop.");
}

console.log("\nüèÅ Diagnostic termin√© !");

// Instructions pour tester manuellement
console.log("\nüñ±Ô∏è INSTRUCTIONS DE TEST MANUEL:");
console.log("1. Survolez un module CV - le handle (‚ãÆ‚ãÆ) devrait appara√Ætre √† gauche");
console.log("2. Cliquez et faites glisser le handle pour d√©placer le module");
console.log("3. Le module devrait se d√©placer avec une animation fluide");
console.log("4. Rel√¢chez pour d√©poser le module √† sa nouvelle position");
