// Test script pour v√©rifier que l'erreur updatePreview est corrig√©e
// √Ä ex√©cuter dans la console du navigateur

console.log("üîß Test de correction de l'erreur updatePreview");

// Test 1: V√©rifier que tous les √©l√©ments preview sont bien initialis√©s
console.log("\nüìã V√©rification des √©l√©ments preview:");
const previewElements = [
    'cv-nom-prenom-preview',
    'cv-poste-preview', 
    'cv-description-preview',
    'cv-experience-preview',
    'cv-formation-preview',
    'cv-competences-preview'
];

let allElementsFound = true;
previewElements.forEach(id => {
    const element = document.getElementById(id);
    const status = element ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${id}: ${element ? 'Trouv√©' : 'MANQUANT'}`);
    if (!element) allElementsFound = false;
});

// Test 2: V√©rifier que l'objet preview est correctement initialis√©
console.log("\nüéØ V√©rification de l'objet preview:");
if (typeof preview !== 'undefined') {
    console.log("‚úÖ Objet preview d√©fini");
    const previewKeys = [
        'cvNomPrenom', 'cvPoste', 'cvDescription', 
        'cvExperience', 'cvFormation', 'cvCompetences'
    ];
    
    previewKeys.forEach(key => {
        const element = preview[key];
        const status = element ? '‚úÖ' : '‚ùå';
        console.log(`${status} preview.${key}: ${element ? 'Initialis√©' : 'UNDEFINED'}`);
    });
} else {
    console.log("‚ùå Objet preview non d√©fini");
}

// Test 3: Tester la fonction updatePreview
console.log("\nüöÄ Test de la fonction updatePreview:");
try {
    // Remplir quelques champs de test
    const nomInput = document.getElementById('nom');
    const prenomInput = document.getElementById('prenom');
    const posteInput = document.getElementById('poste');
    const descInput = document.getElementById('description');
    
    if (nomInput && prenomInput && posteInput && descInput) {
        console.log("üìù Remplissage des champs de test...");
        nomInput.value = "DUPONT";
        prenomInput.value = "Jean";
        posteInput.value = "D√©veloppeur Full Stack";
        descInput.value = "Passionn√© par le d√©veloppement web avec 5 ans d'exp√©rience.";
        
        console.log("üîÑ Appel de updatePreview('form')...");
        if (typeof updatePreview === 'function') {
            updatePreview('form');
            console.log("‚úÖ updatePreview('form') ex√©cut√©e sans erreur !");
            
            // V√©rifier que les valeurs ont √©t√© mises √† jour dans la preview
            const previewNom = document.getElementById('cv-nom-prenom-preview');
            const previewPoste = document.getElementById('cv-poste-preview');
            
            if (previewNom && previewPoste) {
                console.log(`üìä Nom dans preview: "${previewNom.textContent}"`);
                console.log(`üìä Poste dans preview: "${previewPoste.textContent}"`);
                
                if (previewNom.textContent.includes("Jean DUPONT")) {
                    console.log("‚úÖ Synchronisation nom/pr√©nom OK");
                } else {
                    console.log("‚ùå Probl√®me de synchronisation nom/pr√©nom");
                }
                
                if (previewPoste.textContent.includes("D√©veloppeur Full Stack")) {
                    console.log("‚úÖ Synchronisation poste OK");
                } else {
                    console.log("‚ùå Probl√®me de synchronisation poste");
                }
            }
        } else {
            console.log("‚ùå Fonction updatePreview non d√©finie");
        }
    } else {
        console.log("‚ùå Champs de formulaire non trouv√©s");
    }
} catch (error) {
    console.log("‚ùå ERREUR lors du test updatePreview:", error.message);
    console.log("Stack trace:", error.stack);
}

// Test 4: V√©rifier reinitializePreviewSelectors
console.log("\nüîÑ Test de reinitializePreviewSelectors:");
try {
    if (typeof reinitializePreviewSelectors === 'function') {
        reinitializePreviewSelectors();
        console.log("‚úÖ reinitializePreviewSelectors() ex√©cut√©e sans erreur");
    } else {
        console.log("‚ùå Fonction reinitializePreviewSelectors non d√©finie");
    }
} catch (error) {
    console.log("‚ùå ERREUR reinitializePreviewSelectors:", error.message);
}

// Test 5: Test de stress - multiple updatePreview calls
console.log("\nüí™ Test de stress - 10 appels updatePreview:");
try {
    for (let i = 0; i < 10; i++) {
        updatePreview('form');
    }
    console.log("‚úÖ 10 appels updatePreview r√©ussis !");
} catch (error) {
    console.log("‚ùå ERREUR pendant le test de stress:", error.message);
}

// R√©sum√©
console.log("\nüìà R√âSUM√â DU TEST:");
if (allElementsFound && typeof updatePreview === 'function') {
    console.log("üéâ SUCCESS! L'erreur updatePreview a √©t√© corrig√©e !");
    console.log("‚úÖ Tous les √©l√©ments preview sont disponibles");
    console.log("‚úÖ La fonction updatePreview fonctionne correctement");
    console.log("‚úÖ L'initialisation est correcte");
} else {
    console.log("‚ö†Ô∏è Il reste des probl√®mes √† r√©soudre:");
    if (!allElementsFound) console.log("- Certains √©l√©ments preview sont manquants");
    if (typeof updatePreview !== 'function') console.log("- La fonction updatePreview n'est pas d√©finie");
}

console.log("\nüèÅ Test termin√© !");
